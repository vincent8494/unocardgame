{"version":3,"sources":["assets/cards-front sync /^/.//.*/.png$","assets/card-back.png","assets/logo.png","assets/cards-front/0B.png","assets/cards-front/0G.png","assets/cards-front/0R.png","assets/cards-front/0Y.png","assets/cards-front/1B.png","assets/cards-front/1G.png","assets/cards-front/1R.png","assets/cards-front/1Y.png","assets/cards-front/2B.png","assets/cards-front/2G.png","assets/cards-front/2R.png","assets/cards-front/2Y.png","assets/cards-front/3B.png","assets/cards-front/3G.png","assets/cards-front/3R.png","assets/cards-front/3Y.png","assets/cards-front/4B.png","assets/cards-front/4G.png","assets/cards-front/4R.png","assets/cards-front/4Y.png","assets/cards-front/5B.png","assets/cards-front/5G.png","assets/cards-front/5R.png","assets/cards-front/5Y.png","assets/cards-front/6B.png","assets/cards-front/6G.png","assets/cards-front/6R.png","assets/cards-front/6Y.png","assets/cards-front/7B.png","assets/cards-front/7G.png","assets/cards-front/7R.png","assets/cards-front/7Y.png","assets/cards-front/8B.png","assets/cards-front/8G.png","assets/cards-front/8R.png","assets/cards-front/8Y.png","assets/cards-front/9B.png","assets/cards-front/9G.png","assets/cards-front/9R.png","assets/cards-front/9Y.png","assets/cards-front/D2B.png","assets/cards-front/D2G.png","assets/cards-front/D2R.png","assets/cards-front/D2Y.png","assets/cards-front/D4W.png","assets/cards-front/W.png","assets/cards-front/_B.png","assets/cards-front/_G.png","assets/cards-front/_R.png","assets/cards-front/_Y.png","assets/cards-front/skipB.png","assets/cards-front/skipG.png","assets/cards-front/skipR.png","assets/cards-front/skipY.png","utils/randomCodeGenerator.js","components/Homepage.js","utils/packOfCards.js","components/Spinner.js","assets/sounds/game-bg-music.mp3","assets/sounds/uno-sound.mp3","assets/sounds/shuffling-cards-1.mp3","assets/sounds/skip-sound.mp3","assets/sounds/draw2-sound.mp3","assets/sounds/wild-sound.mp3","assets/sounds/draw4-sound.mp3","assets/sounds/game-over-sound.mp3","components/Game.js","utils/shuffleArray.js","components/GameRules.js","components/SplashScreen.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","makeid","length","result","characters","i","charAt","Math","floor","random","Homepage","roomCode","setRoomCode","useState","_jsx","className","children","_jsxs","src","require","default","width","type","placeholder","onChange","event","target","value","Link","to","concat","randomCodeGenerator","Spinner","socket","Game","props","data","queryString","parse","location","search","room","setRoom","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","useEffect","io","connect","emit","error","off","gameOver","setGameOver","winner","setWinner","turn","setTurn","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","currentColor","setCurrentColor","currentNumber","setCurrentNumber","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","isSoundMuted","setSoundMuted","isMusicMuted","setMusicMuted","playBBgMusic","pause","useSound","bgMusic","loop","playUnoSound","unoSound","playShufflingSound","shufflingSound","playSkipCardSound","skipCardSound","playDraw2CardSound","draw2CardSound","playWildCardSound","wildCardSound","playDraw4CardSound","draw4CardSound","playGameOverSound","gameOverSound","shuffledCards","array","j","temp","shuffleArray","PACK_OF_CARDS","splice","startingCardIndex","on","_ref","_ref2","_ref3","_ref4","name","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","checkWinner","player","toggleChatBox","style","display","sendMessage","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","console","log","removeIndex","indexOf","slice","alert","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","drawCard","colorOfDrawnCard","numberOfDrawnCard","_Fragment","onClick","pointerEvents","item","disabled","class","msg","user","text","onKeyPress","key","href","GameRules","onClose","history","useHistory","handleContinue","stopPropagation","SplashScreen","onSkip","isVisible","setIsVisible","showRules","setShowRules","isHovered","setIsHovered","countdown","setCountdown","timerRef","useRef","handleSkip","useCallback","current","clearInterval","setInterval","prev","handleClick","handleRulesClose","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","role","tabIndex","onKeyDown","cardBackImage","App","showSplash","setShowSplash","timer","setTimeout","clearTimeout","handleSkipSplash","Switch","Route","path","exact","component","ReactDOM","render","React","StrictMode","BrowserRouter","getElementById"],"mappings":"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","file":"static/js/main.9b253448.chunk.js","sourcesContent":["var map = {\n\t\"./0B.png\": 82,\n\t\"./0G.png\": 83,\n\t\"./0R.png\": 84,\n\t\"./0Y.png\": 85,\n\t\"./1B.png\": 86,\n\t\"./1G.png\": 87,\n\t\"./1R.png\": 88,\n\t\"./1Y.png\": 89,\n\t\"./2B.png\": 90,\n\t\"./2G.png\": 91,\n\t\"./2R.png\": 92,\n\t\"./2Y.png\": 93,\n\t\"./3B.png\": 94,\n\t\"./3G.png\": 95,\n\t\"./3R.png\": 96,\n\t\"./3Y.png\": 97,\n\t\"./4B.png\": 98,\n\t\"./4G.png\": 99,\n\t\"./4R.png\": 100,\n\t\"./4Y.png\": 101,\n\t\"./5B.png\": 102,\n\t\"./5G.png\": 103,\n\t\"./5R.png\": 104,\n\t\"./5Y.png\": 105,\n\t\"./6B.png\": 106,\n\t\"./6G.png\": 107,\n\t\"./6R.png\": 108,\n\t\"./6Y.png\": 109,\n\t\"./7B.png\": 110,\n\t\"./7G.png\": 111,\n\t\"./7R.png\": 112,\n\t\"./7Y.png\": 113,\n\t\"./8B.png\": 114,\n\t\"./8G.png\": 115,\n\t\"./8R.png\": 116,\n\t\"./8Y.png\": 117,\n\t\"./9B.png\": 118,\n\t\"./9G.png\": 119,\n\t\"./9R.png\": 120,\n\t\"./9Y.png\": 121,\n\t\"./D2B.png\": 122,\n\t\"./D2G.png\": 123,\n\t\"./D2R.png\": 124,\n\t\"./D2Y.png\": 125,\n\t\"./D4W.png\": 126,\n\t\"./W.png\": 127,\n\t\"./_B.png\": 128,\n\t\"./_G.png\": 129,\n\t\"./_R.png\": 130,\n\t\"./_Y.png\": 131,\n\t\"./skipB.png\": 132,\n\t\"./skipG.png\": 133,\n\t\"./skipR.png\": 134,\n\t\"./skipY.png\": 135\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 15;","export default __webpack_public_path__ + \"static/media/card-back.ee67de74.png\";","export default __webpack_public_path__ + \"static/media/logo.2d1c62d5.png\";","export default __webpack_public_path__ + \"static/media/0B.4a5eb6bf.png\";","export default __webpack_public_path__ + \"static/media/0G.87d131c4.png\";","export default __webpack_public_path__ + \"static/media/0R.17fec01d.png\";","export default __webpack_public_path__ + \"static/media/0Y.dbfd6ac8.png\";","export default __webpack_public_path__ + \"static/media/1B.d1916ca9.png\";","export default __webpack_public_path__ + \"static/media/1G.0fb8729c.png\";","export default __webpack_public_path__ + \"static/media/1R.49ed3f72.png\";","export default __webpack_public_path__ + \"static/media/1Y.4881d6f5.png\";","export default __webpack_public_path__ + \"static/media/2B.b30c34c7.png\";","export default __webpack_public_path__ + \"static/media/2G.9f1043d9.png\";","export default __webpack_public_path__ + \"static/media/2R.b5523c9e.png\";","export default __webpack_public_path__ + \"static/media/2Y.7a49720f.png\";","export default __webpack_public_path__ + \"static/media/3B.55554e09.png\";","export default __webpack_public_path__ + \"static/media/3G.d12b188c.png\";","export default __webpack_public_path__ + \"static/media/3R.01e98a85.png\";","export default __webpack_public_path__ + \"static/media/3Y.60a855f1.png\";","export default __webpack_public_path__ + \"static/media/4B.9f863da2.png\";","export default __webpack_public_path__ + \"static/media/4G.e7f0c39e.png\";","export default __webpack_public_path__ + \"static/media/4R.d4b55dbd.png\";","export default __webpack_public_path__ + \"static/media/4Y.ae547a47.png\";","export default __webpack_public_path__ + \"static/media/5B.7da3f78c.png\";","export default __webpack_public_path__ + \"static/media/5G.5f629ef3.png\";","export default __webpack_public_path__ + \"static/media/5R.1cdf87eb.png\";","export default __webpack_public_path__ + \"static/media/5Y.8dfd1d59.png\";","export default __webpack_public_path__ + \"static/media/6B.3ae6979e.png\";","export default __webpack_public_path__ + \"static/media/6G.f7ec1912.png\";","export default __webpack_public_path__ + \"static/media/6R.ddda836b.png\";","export default __webpack_public_path__ + \"static/media/6Y.7ad7c4b5.png\";","export default __webpack_public_path__ + \"static/media/7B.61517841.png\";","export default __webpack_public_path__ + \"static/media/7G.4a277a6d.png\";","export default __webpack_public_path__ + \"static/media/7R.d9082455.png\";","export default __webpack_public_path__ + \"static/media/7Y.6eafca54.png\";","export default __webpack_public_path__ + \"static/media/8B.30db8e3e.png\";","export default __webpack_public_path__ + \"static/media/8G.b0f18f92.png\";","export default __webpack_public_path__ + \"static/media/8R.296eb053.png\";","export default __webpack_public_path__ + \"static/media/8Y.cefea39b.png\";","export default __webpack_public_path__ + \"static/media/9B.e252ce18.png\";","export default __webpack_public_path__ + \"static/media/9G.82ff5a0b.png\";","export default __webpack_public_path__ + \"static/media/9R.616afbce.png\";","export default __webpack_public_path__ + \"static/media/9Y.fc2b075e.png\";","export default __webpack_public_path__ + \"static/media/D2B.a1e36402.png\";","export default __webpack_public_path__ + \"static/media/D2G.cc357b81.png\";","export default __webpack_public_path__ + \"static/media/D2R.45d93f92.png\";","export default __webpack_public_path__ + \"static/media/D2Y.3b7c7812.png\";","export default __webpack_public_path__ + \"static/media/D4W.8ab81810.png\";","export default __webpack_public_path__ + \"static/media/W.d932cc55.png\";","export default __webpack_public_path__ + \"static/media/_B.95aa59aa.png\";","export default __webpack_public_path__ + \"static/media/_G.d9435180.png\";","export default __webpack_public_path__ + \"static/media/_R.95d0dbdf.png\";","export default __webpack_public_path__ + \"static/media/_Y.43a5d6f0.png\";","export default __webpack_public_path__ + \"static/media/skipB.f083b8d7.png\";","export default __webpack_public_path__ + \"static/media/skipG.d0dc1da2.png\";","export default __webpack_public_path__ + \"static/media/skipR.80b52ed1.png\";","export default __webpack_public_path__ + \"static/media/skipY.1355a1fb.png\";","export default function makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport randomCodeGenerator from '../utils/randomCodeGenerator'\n\nconst Homepage = () => {\n    const [roomCode, setRoomCode] = useState('')\n\n    return (\n        <div className='Homepage'>\n            <div className='homepage-menu'>\n                <img src={require('../assets/logo.png').default} width='200px' />\n                <div className='homepage-form'>\n                    <div className='homepage-join'>\n                        <input type='text' placeholder='Game Code' onChange={(event) => setRoomCode(event.target.value)} />\n                        <Link to={`/play?roomCode=${roomCode}`}><button className=\"game-button green\">JOIN GAME</button></Link>\n                    </div>\n                    <h1>OR</h1>\n                    <div className='homepage-create'>\n                        <Link to={`/play?roomCode=${randomCodeGenerator(5)}`}><button className=\"game-button orange\">CREATE GAME</button></Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Homepage\n","//pack of 108 cards (_ = reverse)\nexport default [\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W'\n]","import React from 'react'\n\nconst Spinner = () => {\n    return (\n        <div className=\"loader\">Loading...</div>\n    )\n}\n\nexport default Spinner","export default __webpack_public_path__ + \"static/media/game-bg-music.b2aba912.mp3\";","export default __webpack_public_path__ + \"static/media/uno-sound.5d88cef2.mp3\";","export default __webpack_public_path__ + \"static/media/shuffling-cards-1.30ba20ce.mp3\";","export default __webpack_public_path__ + \"static/media/skip-sound.1227f2fd.mp3\";","export default __webpack_public_path__ + \"static/media/draw2-sound.0f5186fc.mp3\";","export default __webpack_public_path__ + \"static/media/wild-sound.dc7f4eb1.mp3\";","export default __webpack_public_path__ + \"static/media/draw4-sound.37381092.mp3\";","export default __webpack_public_path__ + \"static/media/game-over-sound.503df35a.mp3\";","import React, { useEffect, useState } from 'react'\nimport PACK_OF_CARDS from '../utils/packOfCards'\nimport shuffleArray from '../utils/shuffleArray'\nimport io from 'socket.io-client'\nimport queryString from 'query-string'\nimport Spinner from './Spinner'\nimport useSound from 'use-sound'\n\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\nimport unoSound from '../assets/sounds/uno-sound.mp3'\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\n\n//NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\n\nlet socket\n// const ENDPOINT = 'http://localhost:5000'\nconst ENDPOINT = 'https://uno-online-multiplayer.herokuapp.com/'\n\nconst Game = (props) => {\n    const data = queryString.parse(props.location.search)\n\n    //initialize socket state\n    const [room, setRoom] = useState(data.roomCode)\n    const [roomFull, setRoomFull] = useState(false)\n    const [users, setUsers] = useState([])\n    const [currentUser, setCurrentUser] = useState('')\n    const [message, setMessage] = useState('')\n    const [messages, setMessages] = useState([])\n\n    useEffect(() => {\n        const connectionOptions =  {\n            \"forceNew\" : true,\n            \"reconnectionAttempts\": \"Infinity\", \n            \"timeout\" : 10000,                  \n            \"transports\" : [\"websocket\"]\n        }\n        socket = io.connect(ENDPOINT, connectionOptions)\n\n        socket.emit('join', {room: room}, (error) => {\n            if(error)\n                setRoomFull(true)\n        })\n\n        //cleanup on component unmount\n        return function cleanup() {\n            socket.emit('disconnect')\n            //shut down connnection instance\n            socket.off()\n        }\n    }, [])\n\n    //initialize game state\n    const [gameOver, setGameOver] = useState(true)\n    const [winner, setWinner] = useState('')\n    const [turn, setTurn] = useState('')\n    const [player1Deck, setPlayer1Deck] = useState([])\n    const [player2Deck, setPlayer2Deck] = useState([])\n    const [currentColor, setCurrentColor] = useState('')\n    const [currentNumber, setCurrentNumber] = useState('')\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\n    const [drawCardPile, setDrawCardPile] = useState([])\n\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\n    const [isSoundMuted, setSoundMuted] = useState(false)\n    const [isMusicMuted, setMusicMuted] = useState(true)\n\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\n    const [playUnoSound] = useSound(unoSound)\n    const [playShufflingSound] = useSound(shufflingSound)\n    const [playSkipCardSound] = useSound(skipCardSound)\n    const [playDraw2CardSound] = useSound(draw2CardSound)\n    const [playWildCardSound] = useSound(wildCardSound)\n    const [playDraw4CardSound] = useSound(draw4CardSound)\n    const [playGameOverSound] = useSound(gameOverSound)\n\n    //runs once on component mount\n    useEffect(() => {\n        //shuffle PACK_OF_CARDS array\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\n\n        //extract first 7 elements to player1Deck\n        const player1Deck = shuffledCards.splice(0, 7)\n\n        //extract first 7 elements to player2Deck\n        const player2Deck = shuffledCards.splice(0, 7)\n\n        //extract random card from shuffledCards and check if its not an action card\n        let startingCardIndex\n        while(true) {\n            startingCardIndex = Math.floor(Math.random() * 94)\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\n            shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\n            shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\n            shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\n            shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\n                continue;\n            }\n            else\n                break;\n        }\n\n        //extract the card from that startingCardIndex into the playedCardsPile\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\n\n        //store all remaining cards into drawCardPile\n        const drawCardPile = shuffledCards\n\n        //send initial state to server\n        socket.emit('initGameState', {\n            gameOver: false,\n            turn: 'Player 1',\n            player1Deck: [...player1Deck],\n            player2Deck: [...player2Deck],\n            currentColor: playedCardsPile[0].charAt(1),\n            currentNumber: playedCardsPile[0].charAt(0),\n            playedCardsPile: [...playedCardsPile],\n            drawCardPile: [...drawCardPile]\n        })\n    }, [])\n\n    useEffect(() => {\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\n            setGameOver(gameOver)\n            setTurn(turn)\n            setPlayer1Deck(player1Deck)\n            setPlayer2Deck(player2Deck)\n            setCurrentColor(currentColor)\n            setCurrentNumber(currentNumber)\n            setPlayedCardsPile(playedCardsPile)\n            setDrawCardPile(drawCardPile)\n        })\n\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\n            gameOver && setGameOver(gameOver)\n            gameOver===true && playGameOverSound()\n            winner && setWinner(winner)\n            turn && setTurn(turn)\n            player1Deck && setPlayer1Deck(player1Deck)\n            player2Deck && setPlayer2Deck(player2Deck)\n            currentColor && setCurrentColor(currentColor)\n            currentNumber && setCurrentNumber(currentNumber)\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\n            drawCardPile && setDrawCardPile(drawCardPile)\n            setUnoButtonPressed(false)\n        })\n\n        socket.on(\"roomData\", ({ users }) => {\n            setUsers(users)\n        })\n\n        socket.on('currentUserData', ({ name }) => {\n            setCurrentUser(name)\n        })\n\n        socket.on('message', message => {\n            setMessages(messages => [ ...messages, message ])\n\n            const chatBody = document.querySelector('.chat-body')\n            chatBody.scrollTop = chatBody.scrollHeight\n        })\n    }, [])\n\n    //some util functions\n    const checkGameOver = (arr) => {\n        return arr.length === 1\n    }\n    \n    const checkWinner = (arr, player) => {\n        return arr.length === 1 ? player : ''\n    }\n\n    const toggleChatBox = () => {\n        const chatBody = document.querySelector('.chat-body')\n        if(isChatBoxHidden) {\n            chatBody.style.display = 'block'\n            setChatBoxHidden(false)\n        }\n        else {\n            chatBody.style.display = 'none'\n            setChatBoxHidden(true)\n        }\n    }\n\n    const sendMessage= (event) => {\n        event.preventDefault()\n        if(message) {\n            socket.emit('sendMessage', { message: message }, () => {\n                setMessage('')\n            })\n        }\n    }\n\n    //driver functions\n    const onCardPlayedHandler = (played_card) => {\n        //extract player who played the card\n        const cardPlayedBy = turn\n        switch(played_card) {\n            //if card played was a number card\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\n                //extract number and color of played card\n                const numberOfPlayedCard = played_card.charAt(0)\n                const colorOfPlayedCard = played_card.charAt(1)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                }\n                //check for number match\n                else if(currentNumber === numberOfPlayedCard) {\n                    console.log('numbers matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                turn: 'Player 2',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playShufflingSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                turn: 'Player 1',\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a skip card\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(4)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                }\n                //check for number match - if skip card played on skip card\n                else if(currentNumber === 404) {\n                    console.log('Numbers matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1)\n                            updatedPlayer1Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile]\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop()\n                            const drawCard2 = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1)\n                            updatedPlayer2Deck.push(drawCard2)\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playSkipCardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 2'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a draw 2 card\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(2)\n                //check for color match\n                if(currentColor === colorOfPlayedCard) {\n                    console.log('colors matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1X)\n                            updatedPlayer1Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1X)\n                            updatedPlayer2Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                }\n                //check for number match - if draw 2 card played on draw 2 card\n                else if(currentNumber === 252) {                        \n                    console.log('number matched!')\n                    //check who played the card and return new state accordingly\n                    if(cardPlayedBy === 'Player 1') {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                            updatedPlayer1Deck.push(drawCard1X)\n                            updatedPlayer1Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                    else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop()\n                            const drawCard2X = copiedDrawCardPileArray.pop()\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                            updatedPlayer2Deck.push(drawCard1X)\n                            updatedPlayer2Deck.push(drawCard2X)\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                        else {\n                            !isSoundMuted && playDraw2CardSound()\n                            //send new state to server\n                            socket.emit('updateGameState', {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, 'Player 1'),\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray]\n                            })\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert('Invalid Move!')\n                }\n                break;\n            }\n            //if card played was a wild card\n            case 'W': {\n                //check who played the card and return new state accordingly\n                if(cardPlayedBy === 'Player 1') {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player1Deck.indexOf(played_card)\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                        updatedPlayer1Deck.push(drawCard1)\n                        updatedPlayer1Deck.push(drawCard2)\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            turn: 'Player 2',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...updatedPlayer1Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            turn: 'Player 2',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                            currentColor: newColor,\n                            currentNumber: 300\n                        })\n                    }\n                }\n                else {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player2Deck.indexOf(played_card)\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile]\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop()\n                        const drawCard2 = copiedDrawCardPileArray.pop()\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                        updatedPlayer2Deck.push(drawCard1)\n                        updatedPlayer2Deck.push(drawCard2)\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            turn: 'Player 1',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...updatedPlayer2Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playWildCardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            turn: 'Player 1',\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                            currentColor: newColor,\n                            currentNumber: 300\n                        })\n                    }\n                }\n                break;\n            }\n            //if card played was a draw four wild card\n            case 'D4W': {\n                //check who played the card and return new state accordingly\n                if(cardPlayedBy === 'Player 1') {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player1Deck.indexOf(played_card)\n                    //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                    //make a copy of drawCardPile array\n                    const copiedDrawCardPileArray = [...drawCardPile]\n                    //pull out last four elements from it\n                    const drawCard1 = copiedDrawCardPileArray.pop()\n                    const drawCard2 = copiedDrawCardPileArray.pop()\n                    const drawCard3 = copiedDrawCardPileArray.pop()\n                    const drawCard4 = copiedDrawCardPileArray.pop()\n                    //then update currentColor and currentNumber - turn will remain same\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //pull out last two elements from drawCardPile\n                        const drawCard1X = copiedDrawCardPileArray.pop()\n                        const drawCard2X = copiedDrawCardPileArray.pop()\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\n                        updatedPlayer1Deck.push(drawCard1X)\n                        updatedPlayer1Deck.push(drawCard2X)\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...updatedPlayer1Deck],\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, 'Player 1'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                }\n                else {\n                    //ask for new color\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player2Deck.indexOf(played_card)\n                    //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                    //make a copy of drawCardPile array\n                    const copiedDrawCardPileArray = [...drawCardPile]\n                    //pull out last four elements from it\n                    const drawCard1 = copiedDrawCardPileArray.pop()\n                    const drawCard2 = copiedDrawCardPileArray.pop()\n                    const drawCard3 = copiedDrawCardPileArray.pop()\n                    const drawCard4 = copiedDrawCardPileArray.pop()\n                    //then update currentColor and currentNumber - turn will remain same\n                    !isSoundMuted && playDraw4CardSound()\n                    //send new state to server\n                    socket.emit('updateGameState', {\n                        gameOver: checkGameOver(player2Deck),\n                        winner: checkWinner(player2Deck, 'Player 2'),\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                        currentColor: newColor,\n                        currentNumber: 600,\n                        drawCardPile: [...copiedDrawCardPileArray]\n                    })\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\n                        //pull out last two elements from drawCardPile\n                        const drawCard1X = copiedDrawCardPileArray.pop()\n                        const drawCard2X = copiedDrawCardPileArray.pop()\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\n                        updatedPlayer2Deck.push(drawCard1X)\n                        updatedPlayer2Deck.push(drawCard2X)\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...updatedPlayer2Deck],\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                    else {\n                        !isSoundMuted && playDraw4CardSound()\n                        //send new state to server\n                        socket.emit('updateGameState', {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, 'Player 2'),\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray]\n                        })\n                    }\n                }\n            }\n            break;\n        }\n    }\n    \n    const onCardDrawnHandler = () => {\n        //extract player who drew the card\n        const cardDrawnBy = turn\n        //check who drew the card and return new state accordingly\n        if(cardDrawnBy === 'Player 1') {\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile]\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop()\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\n            let numberOfDrawnCard = drawCard.charAt(0)\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw2CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                !isSoundMuted && playWildCardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'D4W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                const drawCard3 = copiedDrawCardPileArray.pop()\n                const drawCard4 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw4CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //if not action card - check if drawn card is playable\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //else add the drawn card to player1's deck\n            else {\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 2',\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n        }\n        else {\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile]\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop()\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\n            let numberOfDrawnCard = drawCard.charAt(0)\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw2CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                !isSoundMuted && playWildCardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            else if(drawCard === 'D4W') {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                //ask for new color\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile]\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop()\n                const drawCard2 = copiedDrawCardPileArray.pop()\n                const drawCard3 = copiedDrawCardPileArray.pop()\n                const drawCard4 = copiedDrawCardPileArray.pop()\n                !isSoundMuted && playDraw4CardSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //if not action card - check if drawn card is playable\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n                alert(`You drew ${drawCard}. It was played for you.`)\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n            //else add the drawn card to player2's deck\n            else {\n                !isSoundMuted && playShufflingSound()\n                //send new state to server\n                socket.emit('updateGameState', {\n                    turn: 'Player 1',\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n                    drawCardPile: [...copiedDrawCardPileArray]\n                })\n            }\n        }\n    }\n    \n    return (\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\n            {(!roomFull) ? <>\n\n                <div className='topInfo'>\n                    <img src={require('../assets/logo.png').default} />\n                    <h1>Game Code: {room}</h1>\n                    <span>\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\n                        <button className='game-button green' onClick={() => {\n                            if(isMusicMuted)\n                                playBBgMusic()\n                            else\n                                pause()\n                            setMusicMuted(!isMusicMuted)\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\n                    </span>\n                </div>\n\n                {/* PLAYER LEFT MESSAGES */}\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\n\n                {users.length===2 && <>\n\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\n                    <div>\n                        {/* PLAYER 1 VIEW */}\n                        {currentUser === 'Player 1' && <>    \n                        <div className='player2Deck' style={{pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 2</p>\n                            {player2Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/card-back.png`).default}\n                                    />\n                            ))}\n                            {turn==='Player 2' && <Spinner />}\n                        </div>\n                        <br />\n                        <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\n                            <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\n                            {playedCardsPile && playedCardsPile.length>0 &&\n                            <img\n                                className='Card'\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\n                                /> }\n                            <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\n                                setUnoButtonPressed(!isUnoButtonPressed)\n                                playUnoSound()\n                            }}>UNO</button>\n                        </div>\n                        <br />\n                        <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 1</p>\n                            {player1Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/cards-front/${item}.png`).default}\n                                    />\n                            ))}\n                        </div>\n\n                        <div className=\"chatBoxWrapper\">\n                            <div className=\"chat-box chat-box-player1\">\n                                <div className=\"chat-head\">\n                                    <h2>Chat Box</h2>\n                                    {!isChatBoxHidden ?\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\n                                </div>\n                                <div className=\"chat-body\">\n                                    <div className=\"msg-insert\">\n                                        {messages.map(msg => {\n                                            if(msg.user === 'Player 2')\n                                                return <div className=\"msg-receive\">{msg.text}</div>\n                                            if(msg.user === 'Player 1')\n                                                return <div className=\"msg-send\">{msg.text}</div>\n                                        })}\n                                    </div>\n                                    <div className=\"chat-text\">\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div> </> }\n\n                        {/* PLAYER 2 VIEW */}\n                        {currentUser === 'Player 2' && <>\n                        <div className='player1Deck' style={{pointerEvents: 'none'}}>\n                            <p className='playerDeckText'>Player 1</p>\n                            {player1Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/card-back.png`).default}\n                                    />\n                            ))}\n                            {turn==='Player 1' && <Spinner />}\n                        </div>\n                        <br />\n                        <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\n                            <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\n                            {playedCardsPile && playedCardsPile.length>0 &&\n                            <img\n                                className='Card'\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\n                                /> }\n                            <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\n                                setUnoButtonPressed(!isUnoButtonPressed)\n                                playUnoSound()\n                            }}>UNO</button>\n                        </div>\n                        <br />\n                        <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\n                            <p className='playerDeckText'>Player 2</p>\n                            {player2Deck.map((item, i) => (\n                                <img\n                                    key={i}\n                                    className='Card'\n                                    onClick={() => onCardPlayedHandler(item)}\n                                    src={require(`../assets/cards-front/${item}.png`).default}\n                                    />\n                            ))}\n                        </div>\n\n                        <div className=\"chatBoxWrapper\">\n                            <div className=\"chat-box chat-box-player2\">\n                                <div className=\"chat-head\">\n                                    <h2>Chat Box</h2>\n                                    {!isChatBoxHidden ?\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\n                                </div>\n                                <div className=\"chat-body\">\n                                    <div className=\"msg-insert\">\n                                        {messages.map(msg => {\n                                            if(msg.user === 'Player 1')\n                                                return <div className=\"msg-receive\">{msg.text}</div>\n                                            if(msg.user === 'Player 2')\n                                                return <div className=\"msg-send\">{msg.text}</div>\n                                        })}\n                                    </div>\n                                    <div className=\"chat-text\">\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div> </> }\n                    </div> }\n                </> }\n            </> : <h1>Room full</h1> }\n\n            <br />\n            <a href='/'><button className=\"game-button red\">QUIT</button></a>\n        </div>\n    )\n}\n\nexport default Game","export default function shuffleArray(array) { \n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1))\n        var temp = array[i]\n        array[i] = array[j]\n        array[j] = temp;\n    }   \n    return array\n}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport '../styles/GameRules.css';\n\nconst GameRules = ({ onClose }) => {\n  const history = useHistory();\n\n  const handleContinue = () => {\n    if (onClose) {\n      onClose();\n    } else {\n      history.push('/');\n    }\n  };\n\n  return (\n    <div className=\"game-rules\" onClick={handleContinue}>\n      <div className=\"rules-content\" onClick={e => e.stopPropagation()}>\n        <h2>UNO Card Game Rules</h2>\n        \n        <div className=\"rules-scrollable\">\n          <section>\n            <h3>Objective of the Game</h3>\n            <p>Be the first player to get rid of all your cards. Points are scored based on the cards left in opponents' hands.</p>\n          </section>\n\n          <section>\n            <h3>Game Setup</h3>\n            <ul>\n              <li><strong>Players:</strong> 2 to 10</li>\n              <li><strong>Cards:</strong> 108 cards total</li>\n              <li>Each player is dealt <strong>7 cards</strong></li>\n              <li>Remaining cards form a <strong>draw pile</strong></li>\n              <li>Top card of draw pile is flipped to start the <strong>discard pile</strong></li>\n            </ul>\n          </section>\n\n          <section>\n            <h3>Game Play</h3>\n            <ol>\n              <li>Players take turns <strong>clockwise</strong></li>\n              <li>On your turn, play a card that matches the <strong>color</strong>, <strong>number</strong>, or <strong>symbol</strong></li>\n              <li>Or play a <strong>Wild</strong> or <strong>Wild Draw Four</strong> card</li>\n              <li>If you can't play, draw one card</li>\n            </ol>\n          </section>\n\n          <section className=\"special-cards\">\n            <h3>Special Cards</h3>\n            <div className=\"card-grid\">\n              <div className=\"card-rule\">\n                <h4>Skip</h4>\n                <p>Next player loses their turn</p>\n              </div>\n              <div className=\"card-rule\">\n                <h4>Reverse</h4>\n                <p>Reverses the direction of play</p>\n              </div>\n              <div className=\"card-rule\">\n                <h4>Draw Two</h4>\n                <p>Next player draws 2 cards and skips turn</p>\n              </div>\n              <div className=\"card-rule\">\n                <h4>Wild</h4>\n                <p>Choose the next color</p>\n              </div>\n              <div className=\"card-rule\">\n                <h4>Wild Draw Four</h4>\n                <p>Choose color, next player draws 4 cards</p>\n              </div>\n            </div>\n          </section>\n\n          <section>\n            <h3>UNO Rule</h3>\n            <p>When you have <strong>one card left</strong>, you <strong>must shout \"UNO!\"</strong> If caught, draw <strong>2 penalty cards</strong>.</p>\n          </section>\n\n          <section>\n            <h3>Scoring</h3>\n            <ul>\n              <li><strong>Number Cards:</strong> Face value (0-9)</li>\n              <li><strong>Action Cards:</strong> 20 points each</li>\n              <li><strong>Wild Cards:</strong> 50 points each</li>\n            </ul>\n            <p>First to <strong>500 points</strong> wins the game!</p>\n          </section>\n        </div>\n\n        <button \n          className=\"continue-button\" \n          onClick={handleContinue}\n        >\n          Continue to Game\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameRules;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport '../styles/SplashScreen.css';\nimport GameRules from './GameRules';\n\n// Import the logo directly from the assets\nimport cardBackImage from '../assets/card-back.png';\n\nconst SplashScreen = ({ onSkip }) => {\n  const [isVisible, setIsVisible] = useState(true);\n  const [showRules, setShowRules] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [countdown, setCountdown] = useState(30);\n  const history = useHistory();\n  const timerRef = useRef();\n  \n  const handleSkip = useCallback(() => {\n    setIsVisible(false);\n    if (onSkip) {\n      onSkip();\n    } else {\n      history.push('/');\n    }\n  }, [onSkip, history]);\n\n  // Clean up timer on unmount\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, []);\n\n  // Start the countdown timer\n  useEffect(() => {\n    timerRef.current = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(timerRef.current);\n          handleSkip();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [handleSkip]);\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n\n  // Handle click anywhere on the splash screen to show rules\n  const handleClick = () => {\n    setShowRules(true);\n  };\n\n  // Handle when rules are closed\n  const handleRulesClose = () => {\n    handleSkip();\n  };\n\n  if (!isVisible) return null;\n  \n  if (showRules) {\n    return <GameRules onClose={handleRulesClose} />;\n  }\n\n  return (\n    <div \n      className={`splash-screen ${isHovered ? 'hovered' : ''}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e) => e.key === 'Enter' && handleClick()}\n      style={{\n        '--card-background': `url(${cardBackImage})`\n      }}\n    >\n      <div className=\"credit-text\">\n        Made by <span className=\"pulse\">@marugevincent</span>\n      </div>\n      <div className=\"splash-content\">\n        <h1>UNO Card Game</h1>\n        <p>Get ready to play the classic card game!</p>\n        <div className=\"countdown\">\n          {!isHovered ? (\n            `Continuing in ${countdown}s`\n          ) : (\n            'Click anywhere to continue'\n          )}\n        </div>\n        <button \n          className=\"skip-button\" \n          onClick={(e) => {\n            e.stopPropagation();\n            handleSkip();\n          }}\n          aria-label=\"Skip intro\"\n        >\n          Skip Intro\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SplashScreen;\n","import './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Homepage from './components/Homepage';\nimport Game from './components/Game';\nimport SplashScreen from './components/SplashScreen';\n\nconst App = () => {\n  const [showSplash, setShowSplash] = useState(true);\n\n  // Hide splash screen after 30 seconds\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowSplash(false);\n    }, 30000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleSkipSplash = () => {\n    setShowSplash(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {showSplash ? (\n        <SplashScreen onSkip={handleSkipSplash} />\n      ) : (\n        <Switch>\n          <Route path='/' exact component={Homepage} />\n          <Route path='/play' exact component={Game} />\n        </Switch>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}